<script setup>
import { onMounted, ref } from "vue";
import JSZip from "jszip"; // 引入jszip
import * as XLSX from "xlsx"; // 引入xlsx

const tableColumnLabel = ref(); // 获取表头内容
const tableData = ref([]); // 表格数据
const tableImages = ref([]); // 表格图片
const rowKeys = ref([]); //列数 A,B,C,D,E,F,G...X,Y,Z只支持上传26列，超过26，可能会出现未知问题
const tabCellList = ref(); //合并的单元格数据['A2:A4','B2:B4','A6:A7','C6:C7']
const tabskeys = ref([
  "label",
  "images",
  "label1",
  "label2",
  "label3",
  "label4",
]); //这里是标题的label,很重要，有几列，就搞几个

onMounted(() => {
  for (var i = 0; i < 26; i++) {
    //输出A-Z  26个大写字母
    rowKeys.value.push(String.fromCharCode(65 + i));
  } //这里为了多增加几列，如果需要解析的数据超过26列，可以一直push  AA,AB,AC,AD,AE.....
  rowKeys.value.push("AA");
});


// 解析图片列表
const analysisImageList = async (zipLoadResultFiles) => {
  const imageIdKey = "xl/drawings/_rels/drawing1.xml.rels"; //图片存放id文件路径
  if (!zipLoadResultFiles[imageIdKey]) return []; //没有图片直接返回空
  const fileContent = await zipLoadResultFiles[imageIdKey].async("string");
  const parser = new DOMParser();
  const xmldom = parser.parseFromString(fileContent, "text/xml");
  const list = xmldom.getElementsByTagName("Relationship");
  let results = [];
  for (var i = 0; i < list.length; i++) {
    const item = list[i];
    results.push({
      id: list[i].getAttribute("Id") || "",
      target: item.getAttribute("Target") || "",
      path: "",
    });
  }
  const PromiseList = results.map((item) => {
    return analysisImageBase64(zipLoadResultFiles, item.target);
  });
  await Promise.all(PromiseList).then((res) => {
    res.forEach((item, index) => {
      results[index].path = item;
    });
  });
  return results;
};


// 解析数据
const getExcelData = (file) => {
  let fileReader = new FileReader(); // 构建fileReader对象
  fileReader.readAsArrayBuffer(file); // 读取指定文件内容
  // 读取操作完成时
  fileReader.onload = function (e) {
    try {
      let data = e.target?.result; // 取得数据data
      let workbook = XLSX.read(data, { type: "binary" }); // 将data转换成excel工作表数据
      const worksheet = workbook.Sheets[workbook.SheetNames[0]]; // 获取第一个工作表
      /*
       * XLSX.utils.sheet_to_json 输出JSON格式数据
       * 获取指定工作表中的数据sheetlist[],整个表中的数据存放在一个数组sheetlist中；
       * sheetlist数组中的每个元素均为一个数组rowlist，是每一行的数据；
       * header 如果列太多，需要修改列的长度数据 可以使用默认值 1
       */
      const sheetlist = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      /**
       * 封装数据 **********#######*********
       */
      formatDate(sheetlist);
    } catch (e) {
      console.log("文件类型不正确");
      return;
    }
  };
};

</script>